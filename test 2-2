/*2．设线性表A、B，元素值为整型，且递减有序，编写函数，实现下列功能：对采用顺序结构和链式结构2种存储结构，
要求在A的空间上构成一个新线性表C，其元素为A和B元素的并集，且表C中的元素值递减有序（互不相同）。*/
//链式结构 
#include<iostream>
#include<stdlib.h>
using namespace std;
struct node{
	int data;
	node *next;
};
void ListTraverse(node *h)		//输出链表 
{
	cout<<"List:";
	while(h)
	{
		cout<<" "<<h->data;
		h=h->next;
	}
	cout<<endl;
}
void DestroyList(node *h)		//销毁链表 
{
	node *p=h;		//指向头指针 
	while(p)
	{
		h=h->next;	//指向下一结点 
		delete p;	//删除p指向的结点 
		p=h;
	}
}
int ListLength(node *h)			//链表长度 
{
	int cnt=0;
	while(h)
	{
		h=h->next;
		cnt++;
	}
	return cnt;
}
void Listsort(node *h)		//排序 
{
	node *p,*q;
	node *tail=NULL;
	while(h->next!=tail)
	{
		p=h;
		q=p->next;
		while(q->next!=tail)
		{
			if((p->data) < (q->data))
			{
				int t=p->data;
				p->data=q->data;
				q->data=t;
			}
			q =q->next;
			p =p->next;
		}
		if((p->data) < (q->data))
			{
				int t=p->data;
				p->data=q->data;
				q->data=t;
			}
		tail = q;
	}
}
//尾插 
node *insertTail(node *h, node *t)
{
    if(h==NULL)
    {
        t->next=NULL;
        return t;
    }
    node *p=h;
    while(p->next)
    {
        p = p->next;
    }
    p->next = t;
    t->next =NULL;
    return h;
}
node *DeleteElem(node *h)			//删除重复 
{
	node *cur=h;
	node *p=NULL;
	node *q=NULL;
	 
	while(cur)
	{
		p=cur;
		q=cur->next;
		while(q)
		{
			if(cur->data == q->data)
				p->next = q->next;
			else
				p=q;
			
			q=q->next;
		}
		cur=cur->next;
	}
	return h;
}

node* Combine(node* head1,node* head2)  //合并两个链表成一个链表 
{
	if(head1 == NULL)
		return head2;
	if(head2 == NULL)
		return head1;
	node *head, *p1, *p2;
	head = head1;
	p1 = head1->next;
	p2 = head2;
	
	node *move = head;   //定义一个移动指针,将两个链表连接在一起
	while(p1)
	{
		move->next = p1;
		move = p1;
		p1 = p1->next;
	}
	while(p2)
	{
		move->next = p2;
		move = p2;
		p2 = p2->next;
	}
	return head;
}

int main()
{
	int n1,n2;
	node *head1=NULL,*head2=NULL;
	node *t1,*t2;
	
	cout<<"请输入A中元素总个数："<<endl;
	cin>>n1;
	printf("请输入A中%d个元素：\n",n1);
	for(int i=0;i<n1;i++)
	{
		t1=new node;
		cin>>t1->data;
		t1->next=NULL;
		head1=insertTail(head1,t1);
	} 
	cout<<"请输入B中元素总个数："<<endl;
	cin>>n2;
	printf("请输入B中%d个元素：\n",n2);
	for(int i=0;i<n2;i++)
	{
		t2=new node;
		cin>>t2->data;
		t2->next=NULL;
		head2=insertTail(head2,t2);
	} 
	
	node *p=Combine(head1,head2);

	DeleteElem(p); 
	Listsort(p);
	cout<<"合并后："<<endl; 	
	ListTraverse(p);
	
	DestroyList(p);
	DestroyList(head1);
	DestroyList(head2);
	return 0;
}
