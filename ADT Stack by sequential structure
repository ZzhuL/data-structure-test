//1．编程实现书P32 ADT Stack 基本操作9个，用顺序存储结构实现；
#include<iostream>
#include<stdlib.h>
using namespace std;

#define Over 0
#define Error 0
#define Ok 1


#define Status int 
#define StackSize 256								//初次分配空间量 
#define StackCreat 128								//空间增加量 
#define ElemType int
typedef struct
{
	ElemType *pBase;
	ElemType *pTop;
	int stacksize;
}SeqStack;

//1.顺序栈初始化
Status InitStack(SeqStack &S)
{
	S.pBase = (ElemType *)malloc(StackSize*sizeof(ElemType));
	if(S.pBase == NULL) exit(Over);
	S.pTop = S.pBase;
	S.stacksize = StackSize;
	return Ok;
}
//2.顺序栈的销毁
Status DestroyStack(SeqStack &S)
{
	if(S.pBase!=NULL)								//判断是否为空栈
	{
		free(S.pBase);
		S.pBase=NULL;	
	} 
	S.pTop=NULL;
	S.stacksize=0;
	return Ok;
}
//3.顺序栈清空
Status ClearStack(SeqStack &S)
{
	S.pTop = S.pBase;
	return Ok;
} 
//4.访问顺序栈栈顶元素
Status GetTop(SeqStack S,ElemType &e)
{
	if(S.pTop==S.pBase) return Error;				//空栈 
	e = *(S.pTop-1);
	return Ok;
} 
//5.顺序栈压栈操作
Status Push(SeqStack &S,ElemType e)
{
	if(S.pTop-S.pBase >=S.stacksize) 				//栈满需增加空间
	{
		S.pBase = (ElemType*)realloc(S.pBase,(S.stacksize+StackCreat)*sizeof(ElemType));
		if(S.pBase == NULL)	exit(Over);				//内存申请失败
		S.pTop=S.pBase+S.stacksize;					//计算栈顶指针
		S.stacksize += StackCreat; 
	} 
	*S.pTop = e;
	S.pTop++;
} 
//6.判断栈是否为空
Status StackEmpty(SeqStack S)
{
	if(S.pTop==S.pBase)	return Ok;
	return Over;
 } 
//7.返回栈中元素个数
Status StackLength(SeqStack S) 
 {
 	if(S.pTop==S.pBase) return Error;				//空栈 
 	ElemType *p=S.pTop;
 	int n=0;
 	while(p!=S.pBase)
 	{
 		p--;
 		n++;
	 }
	 return n;
 }
 //8.顺序栈弹栈
 //并用e返回弹出元素 
 Status Pop(SeqStack &S,ElemType &e)
 {
 	if(S.pTop == S.pBase) return Error;
 	e = *(S.pTop-1);
 	S.pTop--;
	return Ok; 
  } 
//9.从栈底到栈顶依次访问并输出栈中元素
Status PrintOut(SeqStack S)
{
	if(S.pTop==S.pBase) return 	Error;				//空栈
	ElemType *p=S.pBase;
	cout<<"栈底||  "; 
	while(p!=S.pTop)
	{
		cout<<*p<<" ";
		p++;
	}
	cout<<"  ||栈顶"<<endl;
	return Ok;
 } 
 
 
 int main()
 {
 	SeqStack S;
 	int e;
 	InitStack(S);//创建空栈
	cout<<"请输入一个入栈元素（-1表示结束）："<<endl;
	cin>>e;
	while(e!=-1)
	{
		Push(S,e);
		cout<<"请输入一个入栈元素（-1表示结束）："<<endl;
		cin>>e;
	 } 
	 
	cout<<"栈元素个数为："<<StackLength(S)<<endl;
	cout<<"从栈底输出："<<endl; 
	PrintOut(S);								//从栈底输出 
	Pop(S,e);									//弹出栈顶 
	cout<<"|弹出栈顶元素|"<<endl; 
	cout<<"栈元素个数为："<<StackLength(S)<<endl;
	GetTop(S,e);
	if(S.pBase!=S.pTop)
		cout<<"访问栈顶元素："<<e<<endl;
	else
		cout<<"空栈，无栈顶元素"<<endl; 
	ClearStack(S);
	cout<<"|清空栈|"<<endl;
	cout<<"栈空间为："<<S.stacksize<<endl;
	DestroyStack(S);
	cout<<"|销毁栈|"<<endl;
	cout<<"栈空间为："<<S.stacksize<<endl;
	return 0;
 }
